# -*- coding: utf-8 -*-
"""Tcc.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xt6GnmKx5r2PD9UcohWVMljd3H4jxF-M
"""

import pandas as pd
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv('/content/drive/MyDrive/dadosOuvidoriaCSV.csv')
data.head()

data.info()

type(data)

data_pre_ano = data.copy()

"""Separando os dados por ano."""

data2013 = data_pre_ano[data_pre_ano['ano'] == 2013]
data2014 = data_pre_ano[data_pre_ano['ano'] == 2014]
data2015 = data_pre_ano[data_pre_ano['ano'] == 2015]
data2016 = data_pre_ano[data_pre_ano['ano'] == 2016]
data2017 = data_pre_ano[data_pre_ano['ano'] == 2017]
data2018 = data_pre_ano[data_pre_ano['ano'] == 2018]
data2019 = data_pre_ano[data_pre_ano['ano'] == 2019]
data2020 = data_pre_ano[data_pre_ano['ano'] == 2020]
data2021 = data_pre_ano[data_pre_ano['ano'] == 2021]
data2022 = data_pre_ano[data_pre_ano['ano'] == 2022]
data2023 = data_pre_ano[data_pre_ano['ano'] == 2023]
data2024 = data_pre_ano[data_pre_ano['ano'] == 2024]
datanan  = data_pre_ano[data_pre_ano['ano'].isna()]

print(data2024)

uni_campus = data['campus'].unique()
print(uni_campus)

data_pre_campus = data.copy()
campus_angicos = data_pre_campus[data_pre_campus['campus'] == 'CAMPUS ANGICOS']
campus_mossoro = data_pre_campus[data_pre_campus['campus'] == 'CAMPUS MOSSOR√ì']
campus_caraubas = data_pre_campus[data_pre_campus['campus'] == 'CAMPUS CARA√öBAS']
campus_pau_dos_ferros = data_pre_campus[data_pre_campus['campus'] == 'CAMPUS PAU DOS FERROS']
campus_nan  = data_pre_campus[data_pre_campus['campus'].isna()]

print("DataFrame para o CAMPUS ANGICOS:")
print(campus_angicos)
print("\nDataFrame para o CAMPUS MOSSOR√ì:")
print(campus_mossoro)
print("\nDataframe para CAMPUS VAZIO:")
print(campus_nan)

""".
.
.
.
.
.

*VENDO OS PROSSIVEIS VALORES*

---

‚ùó
"""

valunico = data['statusmanifestacao'].unique()
print(valunico)

"""Separando por tipo de manifesta√ß√£o"""

data_pre_tipo = data.copy()
data_pre_tipo = data_pre_tipo.dropna(subset=['tipomanifestacao'])
critica = data_pre_tipo[data_pre_tipo['tipomanifestacao'] == 'Cr√≠tica']
denuncia = data_pre_tipo[data_pre_tipo['tipomanifestacao'] == 'Den√∫ncia']
informacao = data_pre_tipo[data_pre_tipo['tipomanifestacao'] == 'Informa√ß√£o']
reclamacao = data_pre_tipo[data_pre_tipo['tipomanifestacao'] == 'Reclama√ß√£o']
outro = data_pre_tipo[data_pre_tipo['tipomanifestacao'] == 'Outro']
elogio = data_pre_tipo[data_pre_tipo['tipomanifestacao'] == 'Elogio']
solicitacao = data_pre_tipo[data_pre_tipo['tipomanifestacao'] == 'Solicita√ß√£o']
sugestao = data_pre_tipo[data_pre_tipo['tipomanifestacao'] == 'Sugest√£o']
tiponan  = data_pre_tipo[data_pre_tipo['tipomanifestacao'].isna()]

"""Printando"""

print("DataFrame para Cr√≠tica:")
print(critica)
print("\nDataFrame para Den√∫ncia:")
print(denuncia)
print("\nDataFrame para Informa√ß√£o:")
print(informacao)
print("\nDataFrame para Reclama√ß√£o:")
print(reclamacao)
print("\nDataFrame para Outro:")
print(outro)
print("\nDataFrame para Elogio:")
print(elogio)
print("\nDataFrame para Solicita√ß√£o:")
print(solicitacao)
print("\nDataFrame para Sugest√£o:")
print(sugestao)
print("\nDataFrame para Vazio:")
print(tiponan)

"""Filtrando as manifesta√ß√µes an√¥nimas

"""

data_pre_anonima = data.copy()
data_pre_anonima = data_pre_anonima.dropna(subset=['anonima'])
data_pre_anonima_sim = data_pre_anonima[data_pre_anonima['anonima'] == 'sim']
data_pre_anonima_nao = data_pre_anonima[data_pre_anonima['anonima'] == 'n√£o']

print(data_pre_anonima_sim)
print(data_pre_anonima_nao)
print(data_pre_anonima_sim.info())

"""Filtrando por m√™s

"""

data_pre_mes = data.copy()
data_pre_mes = data_pre_mes.dropna(subset=['nomemes'])
data_pre_mes_janeiro = data_pre_mes[data_pre_mes['nomemes'] == 'Janeiro']
data_pre_mes_fevereiro = data_pre_mes[data_pre_mes['nomemes'] == 'Fevereiro']
data_pre_mes_marco = data_pre_mes[data_pre_mes['nomemes'] == 'Mar√ßo']
data_pre_mes_abril = data_pre_mes[data_pre_mes['nomemes'] == 'Abril']
data_pre_mes_maio = data_pre_mes[data_pre_mes['nomemes'] == 'Maio']
data_pre_mes_junho = data_pre_mes[data_pre_mes['nomemes'] == 'Junho']
data_pre_mes_julho = data_pre_mes[data_pre_mes['nomemes'] == 'Julho']
data_pre_mes_agosto = data_pre_mes[data_pre_mes['nomemes'] == 'Agosto']
data_pre_mes_setembro = data_pre_mes[data_pre_mes['nomemes'] == 'Setembro']
data_pre_mes_outubro = data_pre_mes[data_pre_mes['nomemes'] == 'Outubro']
data_pre_mes_novembro = data_pre_mes[data_pre_mes['nomemes'] == 'Novembro']
data_pre_mes_dezembro = data_pre_mes[data_pre_mes['nomemes'] == 'Dezembro']

"""Filtrando por categoria

"""

data_pre_categoria = data.copy()
data_pre_categoria = data_pre_categoria.dropna(subset=['categoria'])
data_pre_discente = data_pre_categoria[data_pre_categoria['categoria'] == 'Discente']
data_pre_comunidade = data_pre_categoria[data_pre_categoria['categoria'] == 'Comunidade Externa']
data_pre_tecnico = data_pre_categoria[data_pre_categoria['categoria'] == 'T√©cnico Administrativo']
data_pre_docente = data_pre_categoria[data_pre_categoria['categoria'] == 'Docente']

"""**AN√ÅLISE!!!**
‚ùó
"""

print(data.describe())

print(data_pre_categoria['categoria'].value_counts())

data_pre_ano['ano'].hist(bins=12)
plt.show()

import matplotlib.pyplot as plt

data_pre_categoria['categoria'].value_counts().plot(kind='bar', color='blue', edgecolor='black')

plt.title('Contagem de Manifesta√ß√µes por Categoria')
plt.xlabel('Categoria')
plt.ylabel('Quantidade de Manifesta√ß√µes')

plt.legend(['Manifesta√ß√µes por Categoria'], loc='upper right')

plt.tight_layout()
plt.show()

anos_totais = data_pre_ano.groupby('ano')['subtotal'].sum().sort_index()

plt.figure(figsize=(10, 6))
plt.plot(anos_totais.index, anos_totais.values, marker='o', linestyle='-', color='#1f77b4', label='Subtotal de Manifesta√ß√µes')

plt.xlabel('Ano', fontsize=12)
plt.ylabel('Subtotal de Manifesta√ß√µes', fontsize=12)

plt.title('Manifesta√ß√µes por Ano', fontsize=14)

plt.legend(loc='upper left')

for i, value in enumerate(anos_totais.values):
    plt.text(anos_totais.index[i], value + 18, str(value), ha='center', fontsize=10)

plt.grid(True, linestyle='--', alpha=0.7)
plt.xticks(rotation=45)
plt.tight_layout()

plt.show()

"""Explorat√≥ria üîç"""

data_pre_mes['mes'] = pd.Categorical(data_pre_mes['nomemes'],
                                     categories=['Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto',
                                                 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],
                                     ordered=True)

mes_totais = data_pre_mes.groupby('mes')['subtotal'].sum()

mes_totais.plot(kind='line', marker='o')
plt.title('Total de Manifesta√ß√µes por M√™s')
plt.xlabel('M√™s')
plt.ylabel('Subtotal')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

data_pre_mes_agosto['ano'] = data_pre_mes_agosto['ano'].astype(int)

anos_totais = data_pre_mes_agosto.groupby('ano')['subtotal'].sum().sort_index()

anos_totais.plot(kind='line', marker='o')
plt.title('Total de Manifesta√ß√µes em Agosto por Ano')
plt.xlabel('Ano')
plt.ylabel('Subtotal')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

tipo_agosto = data_pre_mes_agosto['tipomanifestacao'].value_counts()
tipo_agosto.plot(kind='bar')
plt.title('Tipos de Manifesta√ß√µes Feitas em Agosto')
plt.xlabel('Tipo de Manifesta√ß√£o')
plt.ylabel('N√∫mero de Manifesta√ß√µes')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.show()

for category in data_pre_categoria['categoria'].unique():
    df_category = data_pre_categoria[data_pre_categoria['categoria'] == category]
    print(f"Categoria {category}:\n", df_category.describe())

data_pre_anonima['anonima'].value_counts().plot(kind='bar')
plt.show()

data_pre_campus['campus'].value_counts().plot(kind='bar')
plt.show()

import numpy as np

data_pre_status = data.copy()
status_counts = data_pre_status['statusmanifestacao'].value_counts()

colors = ['#1f77b4', '#ff7f0e', '#238E23', '#993399', '#ff00e0', '#E6E600']

def func(pct, allvalues):
    absolute = int(np.round(pct/100.*np.sum(allvalues)))
    return f'{pct:.1f}% ({absolute})'

fig, ax = plt.subplots(figsize=(10, 6))

wedges, texts = ax.pie(status_counts.values, colors=colors, startangle=90,
                       wedgeprops=dict(edgecolor='w'))

percentages = 100 * status_counts.values / status_counts.values.sum()

percentages = np.round(percentages, 1)
diff = 100 - np.sum(percentages)
if diff != 0:
    percentages[np.argmax(percentages)] += diff

legend_labels = [f'{label}: {pct:.1f}%' for label, pct in zip(status_counts.index, percentages)]

ax.legend(wedges, legend_labels, title="Status", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))

ax.set_title('Propor√ß√£o dos Status das Manifesta√ß√µes', fontsize=14)

plt.tight_layout()

plt.show()

"""**----------------------------------------------------------------------------**
**----------------------------------------------------------------------------**

"""